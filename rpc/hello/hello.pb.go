// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/hello.proto

package hello

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type String struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *String) Reset()         { *m = String{} }
func (m *String) String() string { return proto.CompactTextString(m) }
func (*String) ProtoMessage()    {}
func (*String) Descriptor() ([]byte, []int) {
	return fileDescriptor_92c510c32e645feb, []int{0}
}

func (m *String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_String.Unmarshal(m, b)
}
func (m *String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_String.Marshal(b, m, deterministic)
}
func (m *String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_String.Merge(m, src)
}
func (m *String) XXX_Size() int {
	return xxx_messageInfo_String.Size(m)
}
func (m *String) XXX_DiscardUnknown() {
	xxx_messageInfo_String.DiscardUnknown(m)
}

var xxx_messageInfo_String proto.InternalMessageInfo

func (m *String) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*String)(nil), "rpc.String")
}

func init() { proto.RegisterFile("rpc/hello.proto", fileDescriptor_92c510c32e645feb) }

var fileDescriptor_92c510c32e645feb = []byte{
	// 128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x2a, 0x48, 0xd6,
	0xcf, 0x48, 0xcd, 0xc9, 0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48,
	0x56, 0x92, 0xe3, 0x62, 0x0b, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0x17, 0x12, 0xe1, 0x62, 0x2d, 0x4b,
	0xcc, 0x29, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x8c, 0xa2, 0xb8, 0x78,
	0x3c, 0x40, 0x7a, 0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x85, 0x14, 0xb9, 0x58, 0xc1, 0x7c,
	0x21, 0x6e, 0xbd, 0xa2, 0x82, 0x64, 0x3d, 0x88, 0x5e, 0x29, 0x64, 0x8e, 0x90, 0x3a, 0x17, 0xbb,
	0x73, 0x46, 0x62, 0x5e, 0x5e, 0x6a, 0x0e, 0x6e, 0x45, 0x1a, 0x8c, 0x06, 0x8c, 0x49, 0x6c, 0x60,
	0x77, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x1c, 0xfe, 0x50, 0x9a, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloMessageClient is the client API for HelloMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloMessageClient interface {
	Hello(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	Channel(ctx context.Context, opts ...grpc.CallOption) (HelloMessage_ChannelClient, error)
}

type helloMessageClient struct {
	cc *grpc.ClientConn
}

func NewHelloMessageClient(cc *grpc.ClientConn) HelloMessageClient {
	return &helloMessageClient{cc}
}

func (c *helloMessageClient) Hello(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/rpc.HelloMessage/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloMessageClient) Channel(ctx context.Context, opts ...grpc.CallOption) (HelloMessage_ChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloMessage_serviceDesc.Streams[0], "/rpc.HelloMessage/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloMessageChannelClient{stream}
	return x, nil
}

type HelloMessage_ChannelClient interface {
	Send(*String) error
	Recv() (*String, error)
	grpc.ClientStream
}

type helloMessageChannelClient struct {
	grpc.ClientStream
}

func (x *helloMessageChannelClient) Send(m *String) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloMessageChannelClient) Recv() (*String, error) {
	m := new(String)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloMessageServer is the server API for HelloMessage service.
type HelloMessageServer interface {
	Hello(context.Context, *String) (*String, error)
	Channel(HelloMessage_ChannelServer) error
}

// UnimplementedHelloMessageServer can be embedded to have forward compatible implementations.
type UnimplementedHelloMessageServer struct {
}

func (*UnimplementedHelloMessageServer) Hello(ctx context.Context, req *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedHelloMessageServer) Channel(srv HelloMessage_ChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}

func RegisterHelloMessageServer(s *grpc.Server, srv HelloMessageServer) {
	s.RegisterService(&_HelloMessage_serviceDesc, srv)
}

func _HelloMessage_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloMessageServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.HelloMessage/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloMessageServer).Hello(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloMessage_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloMessageServer).Channel(&helloMessageChannelServer{stream})
}

type HelloMessage_ChannelServer interface {
	Send(*String) error
	Recv() (*String, error)
	grpc.ServerStream
}

type helloMessageChannelServer struct {
	grpc.ServerStream
}

func (x *helloMessageChannelServer) Send(m *String) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloMessageChannelServer) Recv() (*String, error) {
	m := new(String)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloMessage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.HelloMessage",
	HandlerType: (*HelloMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HelloMessage_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _HelloMessage_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/hello.proto",
}
